/* Generated By:JavaCC: Do not edit this line. PDDL21ParserConstants.java */
package edu.asu.sapa.parsing;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PDDL21ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int DEFINE = 7;
  /** RegularExpression Id. */
  int DOMAIN = 8;
  /** RegularExpression Id. */
  int FUNCTION = 9;
  /** RegularExpression Id. */
  int REQUIREMENTS = 10;
  /** RegularExpression Id. */
  int TYPES = 11;
  /** RegularExpression Id. */
  int CONSTANTS = 12;
  /** RegularExpression Id. */
  int PREDICATES = 13;
  /** RegularExpression Id. */
  int ACTION = 14;
  /** RegularExpression Id. */
  int DURATIVE_ACTION = 15;
  /** RegularExpression Id. */
  int DERIVEDPREDICATE = 16;
  /** RegularExpression Id. */
  int VARS = 17;
  /** RegularExpression Id. */
  int PARAMETERS = 18;
  /** RegularExpression Id. */
  int COST = 19;
  /** RegularExpression Id. */
  int REQUIREMENT = 20;
  /** RegularExpression Id. */
  int CONDITION = 21;
  /** RegularExpression Id. */
  int PRECONDITION = 22;
  /** RegularExpression Id. */
  int EFFECT = 23;
  /** RegularExpression Id. */
  int ASSIGN = 24;
  /** RegularExpression Id. */
  int SCALEUP = 25;
  /** RegularExpression Id. */
  int SCALEDOWN = 26;
  /** RegularExpression Id. */
  int INCREASE = 27;
  /** RegularExpression Id. */
  int DECREASE = 28;
  /** RegularExpression Id. */
  int DURATION = 29;
  /** RegularExpression Id. */
  int DURATION_VAR = 30;
  /** RegularExpression Id. */
  int AT = 31;
  /** RegularExpression Id. */
  int START = 32;
  /** RegularExpression Id. */
  int END = 33;
  /** RegularExpression Id. */
  int OVER = 34;
  /** RegularExpression Id. */
  int ALL = 35;
  /** RegularExpression Id. */
  int LOCALTIME = 36;
  /** RegularExpression Id. */
  int AND = 37;
  /** RegularExpression Id. */
  int OR = 38;
  /** RegularExpression Id. */
  int NOT = 39;
  /** RegularExpression Id. */
  int FORALL = 40;
  /** RegularExpression Id. */
  int WHEN = 41;
  /** RegularExpression Id. */
  int EXISTS = 42;
  /** RegularExpression Id. */
  int EITHER = 43;
  /** RegularExpression Id. */
  int IMPLIES = 44;
  /** RegularExpression Id. */
  int PROBLEM = 45;
  /** RegularExpression Id. */
  int DOMAIN_TAG = 46;
  /** RegularExpression Id. */
  int OBJECT = 47;
  /** RegularExpression Id. */
  int GOAL = 48;
  /** RegularExpression Id. */
  int INIT = 49;
  /** RegularExpression Id. */
  int METRIC = 50;
  /** RegularExpression Id. */
  int MAXIMIZE = 51;
  /** RegularExpression Id. */
  int MINIMIZE = 52;
  /** RegularExpression Id. */
  int LENGTH = 53;
  /** RegularExpression Id. */
  int SERIAL = 54;
  /** RegularExpression Id. */
  int PARALLEL = 55;
  /** RegularExpression Id. */
  int A_NUMBER = 56;
  /** RegularExpression Id. */
  int ASSIGN_MATH = 57;
  /** RegularExpression Id. */
  int EQUAL = 58;
  /** RegularExpression Id. */
  int PLUS = 59;
  /** RegularExpression Id. */
  int MINUS = 60;
  /** RegularExpression Id. */
  int MUL = 61;
  /** RegularExpression Id. */
  int DIVIDE = 62;
  /** RegularExpression Id. */
  int COMPARISON = 63;
  /** RegularExpression Id. */
  int VAR = 64;
  /** RegularExpression Id. */
  int NAME = 65;
  /** RegularExpression Id. */
  int OPENBRACE = 66;
  /** RegularExpression Id. */
  int CLOSEBRACE = 67;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "\"define\"",
    "\"domain\"",
    "\":functions\"",
    "\":requirements\"",
    "\":types\"",
    "\":constants\"",
    "\":predicates\"",
    "\":action\"",
    "\":durative-action\"",
    "\":derived\"",
    "\":vars\"",
    "\":parameters\"",
    "\":cost\"",
    "<REQUIREMENT>",
    "\":condition\"",
    "\":precondition\"",
    "\":effect\"",
    "\"assign\"",
    "\"scale-up\"",
    "\"scale-down\"",
    "\"increase\"",
    "\"decrease\"",
    "\":duration\"",
    "\"?duration\"",
    "\"at\"",
    "\"start\"",
    "\"end\"",
    "\"over\"",
    "\"all\"",
    "\"#t\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"forall\"",
    "\"when\"",
    "\"exists\"",
    "\"either\"",
    "\"implies\"",
    "\"problem\"",
    "\":domain\"",
    "\":objects\"",
    "\":goal\"",
    "\":init\"",
    "\":metric\"",
    "\"maximize\"",
    "\"minimize\"",
    "\":length\"",
    "\":serial\"",
    "\":parallel\"",
    "<A_NUMBER>",
    "<ASSIGN_MATH>",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "<COMPARISON>",
    "<VAR>",
    "<NAME>",
    "\"(\"",
    "\")\"",
  };

}
